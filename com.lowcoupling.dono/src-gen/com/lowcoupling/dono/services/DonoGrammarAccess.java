/*
* generated by Xtext
*/
package com.lowcoupling.dono.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DonoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Doc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOPENCURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSectionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSectionsSectionParserRuleCall_3_0 = (RuleCall)cSectionsAssignment_3.eContents().get(0);
		private final RuleCall cCLOSECURLYTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Doc:
		//
		//	"doc" name=ID OPENCURLY sections+=Section* CLOSECURLY;
		public ParserRule getRule() { return rule; }

		//"doc" name=ID OPENCURLY sections+=Section* CLOSECURLY
		public Group getGroup() { return cGroup; }

		//"doc"
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//OPENCURLY
		public RuleCall getOPENCURLYTerminalRuleCall_2() { return cOPENCURLYTerminalRuleCall_2; }

		//sections+=Section*
		public Assignment getSectionsAssignment_3() { return cSectionsAssignment_3; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_3_0() { return cSectionsSectionParserRuleCall_3_0; }

		//CLOSECURLY
		public RuleCall getCLOSECURLYTerminalRuleCall_4() { return cCLOSECURLYTerminalRuleCall_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTitleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTitleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_0 = (RuleCall)cTitleAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLevelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLevelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLevelINTTerminalRuleCall_4_1_0 = (RuleCall)cLevelAssignment_4_1.eContents().get(0);
		private final Assignment cPageBreakAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cPageBreakPagebreakKeyword_5_0 = (Keyword)cPageBreakAssignment_5.eContents().get(0);
		private final RuleCall cOPENCURLYTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyDocItemParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final RuleCall cCLOSECURLYTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Section:
		//
		//	"section" name=ID "title" title=STRING ("level" level=INT)? pageBreak="pagebreak"? OPENCURLY //the section body is optional
		//
		//	body+=DocItem* CLOSECURLY;
		public ParserRule getRule() { return rule; }

		//"section" name=ID "title" title=STRING ("level" level=INT)? pageBreak="pagebreak"? OPENCURLY //the section body is optional
		//
		//body+=DocItem* CLOSECURLY
		public Group getGroup() { return cGroup; }

		//"section"
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"title"
		public Keyword getTitleKeyword_2() { return cTitleKeyword_2; }

		//title=STRING
		public Assignment getTitleAssignment_3() { return cTitleAssignment_3; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_0() { return cTitleSTRINGTerminalRuleCall_3_0; }

		//("level" level=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"level"
		public Keyword getLevelKeyword_4_0() { return cLevelKeyword_4_0; }

		//level=INT
		public Assignment getLevelAssignment_4_1() { return cLevelAssignment_4_1; }

		//INT
		public RuleCall getLevelINTTerminalRuleCall_4_1_0() { return cLevelINTTerminalRuleCall_4_1_0; }

		//pageBreak="pagebreak"?
		public Assignment getPageBreakAssignment_5() { return cPageBreakAssignment_5; }

		//"pagebreak"
		public Keyword getPageBreakPagebreakKeyword_5_0() { return cPageBreakPagebreakKeyword_5_0; }

		//OPENCURLY
		public RuleCall getOPENCURLYTerminalRuleCall_6() { return cOPENCURLYTerminalRuleCall_6; }

		//body+=DocItem*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//DocItem
		public RuleCall getBodyDocItemParserRuleCall_7_0() { return cBodyDocItemParserRuleCall_7_0; }

		//CLOSECURLY
		public RuleCall getCLOSECURLYTerminalRuleCall_8() { return cCLOSECURLYTerminalRuleCall_8; }
	}

	public class DocItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParagraphParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DocItem:
		//
		//	Paragraph | Image;
		public ParserRule getRule() { return rule; }

		//Paragraph | Image
		public Alternatives getAlternatives() { return cAlternatives; }

		//Paragraph
		public RuleCall getParagraphParserRuleCall_0() { return cParagraphParserRuleCall_0; }

		//Image
		public RuleCall getImageParserRuleCall_1() { return cImageParserRuleCall_1; }
	}

	public class ParagraphItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParagraphItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParagraphItem:
		//
		//	Text | Reference;
		public ParserRule getRule() { return rule; }

		//Text | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Text
		public RuleCall getTextParserRuleCall_0() { return cTextParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paragraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPENCURLYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyParagraphItemParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final RuleCall cCLOSECURLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Paragraph:
		//
		//	OPENCURLY body+=ParagraphItem* CLOSECURLY;
		public ParserRule getRule() { return rule; }

		//OPENCURLY body+=ParagraphItem* CLOSECURLY
		public Group getGroup() { return cGroup; }

		//OPENCURLY
		public RuleCall getOPENCURLYTerminalRuleCall_0() { return cOPENCURLYTerminalRuleCall_0; }

		//body+=ParagraphItem*
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//ParagraphItem
		public RuleCall getBodyParagraphItemParserRuleCall_1_0() { return cBodyParagraphItemParserRuleCall_1_0; }

		//CLOSECURLY
		public RuleCall getCLOSECURLYTerminalRuleCall_2() { return cCLOSECURLYTerminalRuleCall_2; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSectionReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImgReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Reference:
		//
		//	SectionReference | ImgReference;
		public ParserRule getRule() { return rule; }

		//SectionReference | ImgReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//SectionReference
		public RuleCall getSectionReferenceParserRuleCall_0() { return cSectionReferenceParserRuleCall_0; }

		//ImgReference
		public RuleCall getImgReferenceParserRuleCall_1() { return cImgReferenceParserRuleCall_1; }
	}

	public class SectionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SectionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSectionCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSectionIDTerminalRuleCall_1_0_1 = (RuleCall)cRefSectionCrossReference_1_0.eContents().get(1);
		
		//SectionReference:
		//
		//	"secRef" ref=[Section];
		public ParserRule getRule() { return rule; }

		//"secRef" ref=[Section]
		public Group getGroup() { return cGroup; }

		//"secRef"
		public Keyword getSecRefKeyword_0() { return cSecRefKeyword_0; }

		//ref=[Section]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Section]
		public CrossReference getRefSectionCrossReference_1_0() { return cRefSectionCrossReference_1_0; }

		//ID
		public RuleCall getRefSectionIDTerminalRuleCall_1_0_1() { return cRefSectionIDTerminalRuleCall_1_0_1; }
	}

	public class ImgReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImgReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImgRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefImageCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefImageQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefImageCrossReference_1_0.eContents().get(1);
		
		//ImgReference:
		//
		//	"imgRef" ref=[Image|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"imgRef" ref=[Image|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"imgRef"
		public Keyword getImgRefKeyword_0() { return cImgRefKeyword_0; }

		//ref=[Image|QualifiedName]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[Image|QualifiedName]
		public CrossReference getRefImageCrossReference_1_0() { return cRefImageCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRefImageQualifiedNameParserRuleCall_1_0_1() { return cRefImageQualifiedNameParserRuleCall_1_0_1; }
	}

	public class PageBreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageBreak");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPagebreakAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPagebreakPagebreakKeyword_0_0 = (Keyword)cPagebreakAssignment_0.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PageBreak:
		//
		//	pagebreak="pagebreak" ENDLINE;
		public ParserRule getRule() { return rule; }

		//pagebreak="pagebreak" ENDLINE
		public Group getGroup() { return cGroup; }

		//pagebreak="pagebreak"
		public Assignment getPagebreakAssignment_0() { return cPagebreakAssignment_0; }

		//"pagebreak"
		public Keyword getPagebreakPagebreakKeyword_0_0() { return cPagebreakPagebreakKeyword_0_0; }

		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_1() { return cENDLINETerminalRuleCall_1; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cCaptionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCaptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCaptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cCaptionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cWidthKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cWidthAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_6_0_1_0 = (RuleCall)cWidthAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cHeightKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cHeightAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_6_1_1_0 = (RuleCall)cHeightAssignment_6_1_1.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Image:
		//
		//	"image" url=STRING "name" name=ID "caption" caption=STRING (("width" width=INT) ("height" height=INT))? ENDLINE;
		public ParserRule getRule() { return rule; }

		//"image" url=STRING "name" name=ID "caption" caption=STRING (("width" width=INT) ("height" height=INT))? ENDLINE
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }

		//"name"
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"caption"
		public Keyword getCaptionKeyword_4() { return cCaptionKeyword_4; }

		//caption=STRING
		public Assignment getCaptionAssignment_5() { return cCaptionAssignment_5; }

		//STRING
		public RuleCall getCaptionSTRINGTerminalRuleCall_5_0() { return cCaptionSTRINGTerminalRuleCall_5_0; }

		//(("width" width=INT) ("height" height=INT))?
		public Group getGroup_6() { return cGroup_6; }

		//"width" width=INT
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"width"
		public Keyword getWidthKeyword_6_0_0() { return cWidthKeyword_6_0_0; }

		//width=INT
		public Assignment getWidthAssignment_6_0_1() { return cWidthAssignment_6_0_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_6_0_1_0() { return cWidthINTTerminalRuleCall_6_0_1_0; }

		//"height" height=INT
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"height"
		public Keyword getHeightKeyword_6_1_0() { return cHeightKeyword_6_1_0; }

		//height=INT
		public Assignment getHeightAssignment_6_1_1() { return cHeightAssignment_6_1_1; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_6_1_1_0() { return cHeightINTTerminalRuleCall_6_1_1_0; }

		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_7() { return cENDLINETerminalRuleCall_7; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//Text:
		//
		//	content=STRING;
		public ParserRule getRule() { return rule; }

		//content=STRING
		public Assignment getContentAssignment() { return cContentAssignment; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_0() { return cContentSTRINGTerminalRuleCall_0; }
	}
	
	
	private DocElements pDoc;
	private QualifiedNameElements pQualifiedName;
	private SectionElements pSection;
	private DocItemElements pDocItem;
	private ParagraphItemElements pParagraphItem;
	private ParagraphElements pParagraph;
	private ReferenceElements pReference;
	private SectionReferenceElements pSectionReference;
	private ImgReferenceElements pImgReference;
	private PageBreakElements pPageBreak;
	private ImageElements pImage;
	private TextElements pText;
	private TerminalRule tOPENCURLY;
	private TerminalRule tCLOSECURLY;
	private TerminalRule tENDLINE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DonoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.lowcoupling.dono.Dono".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Doc:
	//
	//	"doc" name=ID OPENCURLY sections+=Section* CLOSECURLY;
	public DocElements getDocAccess() {
		return (pDoc != null) ? pDoc : (pDoc = new DocElements());
	}
	
	public ParserRule getDocRule() {
		return getDocAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Section:
	//
	//	"section" name=ID "title" title=STRING ("level" level=INT)? pageBreak="pagebreak"? OPENCURLY //the section body is optional
	//
	//	body+=DocItem* CLOSECURLY;
	public SectionElements getSectionAccess() {
		return (pSection != null) ? pSection : (pSection = new SectionElements());
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}

	//DocItem:
	//
	//	Paragraph | Image;
	public DocItemElements getDocItemAccess() {
		return (pDocItem != null) ? pDocItem : (pDocItem = new DocItemElements());
	}
	
	public ParserRule getDocItemRule() {
		return getDocItemAccess().getRule();
	}

	//ParagraphItem:
	//
	//	Text | Reference;
	public ParagraphItemElements getParagraphItemAccess() {
		return (pParagraphItem != null) ? pParagraphItem : (pParagraphItem = new ParagraphItemElements());
	}
	
	public ParserRule getParagraphItemRule() {
		return getParagraphItemAccess().getRule();
	}

	//Paragraph:
	//
	//	OPENCURLY body+=ParagraphItem* CLOSECURLY;
	public ParagraphElements getParagraphAccess() {
		return (pParagraph != null) ? pParagraph : (pParagraph = new ParagraphElements());
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}

	//Reference:
	//
	//	SectionReference | ImgReference;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//SectionReference:
	//
	//	"secRef" ref=[Section];
	public SectionReferenceElements getSectionReferenceAccess() {
		return (pSectionReference != null) ? pSectionReference : (pSectionReference = new SectionReferenceElements());
	}
	
	public ParserRule getSectionReferenceRule() {
		return getSectionReferenceAccess().getRule();
	}

	//ImgReference:
	//
	//	"imgRef" ref=[Image|QualifiedName];
	public ImgReferenceElements getImgReferenceAccess() {
		return (pImgReference != null) ? pImgReference : (pImgReference = new ImgReferenceElements());
	}
	
	public ParserRule getImgReferenceRule() {
		return getImgReferenceAccess().getRule();
	}

	//PageBreak:
	//
	//	pagebreak="pagebreak" ENDLINE;
	public PageBreakElements getPageBreakAccess() {
		return (pPageBreak != null) ? pPageBreak : (pPageBreak = new PageBreakElements());
	}
	
	public ParserRule getPageBreakRule() {
		return getPageBreakAccess().getRule();
	}

	//Image:
	//
	//	"image" url=STRING "name" name=ID "caption" caption=STRING (("width" width=INT) ("height" height=INT))? ENDLINE;
	public ImageElements getImageAccess() {
		return (pImage != null) ? pImage : (pImage = new ImageElements());
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	//Text:
	//
	//	content=STRING;
	public TextElements getTextAccess() {
		return (pText != null) ? pText : (pText = new TextElements());
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//terminal OPENCURLY:
	//
	//	"{";
	public TerminalRule getOPENCURLYRule() {
		return (tOPENCURLY != null) ? tOPENCURLY : (tOPENCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPENCURLY"));
	} 

	//terminal CLOSECURLY:
	//
	//	"}";
	public TerminalRule getCLOSECURLYRule() {
		return (tCLOSECURLY != null) ? tCLOSECURLY : (tCLOSECURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLOSECURLY"));
	} 

	//terminal ENDLINE:
	//
	//	";";
	public TerminalRule getENDLINERule() {
		return (tENDLINE != null) ? tENDLINE : (tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDLINE"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
