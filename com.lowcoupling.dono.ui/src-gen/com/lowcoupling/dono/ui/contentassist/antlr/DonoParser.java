/*
* generated by Xtext
*/
package com.lowcoupling.dono.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.lowcoupling.dono.services.DonoGrammarAccess;

public class DonoParser extends AbstractContentAssistParser {
	
	@Inject
	private DonoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.lowcoupling.dono.ui.contentassist.antlr.internal.InternalDonoParser createParser() {
		com.lowcoupling.dono.ui.contentassist.antlr.internal.InternalDonoParser result = new com.lowcoupling.dono.ui.contentassist.antlr.internal.InternalDonoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDocItemAccess().getAlternatives(), "rule__DocItem__Alternatives");
					put(grammarAccess.getParagraphItemAccess().getAlternatives(), "rule__ParagraphItem__Alternatives");
					put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
					put(grammarAccess.getDocAccess().getGroup(), "rule__Doc__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
					put(grammarAccess.getSectionAccess().getGroup_4(), "rule__Section__Group_4__0");
					put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
					put(grammarAccess.getSectionReferenceAccess().getGroup(), "rule__SectionReference__Group__0");
					put(grammarAccess.getImgReferenceAccess().getGroup(), "rule__ImgReference__Group__0");
					put(grammarAccess.getPageBreakAccess().getGroup(), "rule__PageBreak__Group__0");
					put(grammarAccess.getImageAccess().getGroup(), "rule__Image__Group__0");
					put(grammarAccess.getImageAccess().getGroup_6(), "rule__Image__Group_6__0");
					put(grammarAccess.getImageAccess().getGroup_6_0(), "rule__Image__Group_6_0__0");
					put(grammarAccess.getImageAccess().getGroup_6_1(), "rule__Image__Group_6_1__0");
					put(grammarAccess.getDocAccess().getNameAssignment_1(), "rule__Doc__NameAssignment_1");
					put(grammarAccess.getDocAccess().getSectionsAssignment_3(), "rule__Doc__SectionsAssignment_3");
					put(grammarAccess.getSectionAccess().getNameAssignment_1(), "rule__Section__NameAssignment_1");
					put(grammarAccess.getSectionAccess().getTitleAssignment_3(), "rule__Section__TitleAssignment_3");
					put(grammarAccess.getSectionAccess().getLevelAssignment_4_1(), "rule__Section__LevelAssignment_4_1");
					put(grammarAccess.getSectionAccess().getPageBreakAssignment_5(), "rule__Section__PageBreakAssignment_5");
					put(grammarAccess.getSectionAccess().getBodyAssignment_7(), "rule__Section__BodyAssignment_7");
					put(grammarAccess.getParagraphAccess().getBodyAssignment_1(), "rule__Paragraph__BodyAssignment_1");
					put(grammarAccess.getSectionReferenceAccess().getRefAssignment_1(), "rule__SectionReference__RefAssignment_1");
					put(grammarAccess.getImgReferenceAccess().getRefAssignment_1(), "rule__ImgReference__RefAssignment_1");
					put(grammarAccess.getPageBreakAccess().getPagebreakAssignment_0(), "rule__PageBreak__PagebreakAssignment_0");
					put(grammarAccess.getImageAccess().getUrlAssignment_1(), "rule__Image__UrlAssignment_1");
					put(grammarAccess.getImageAccess().getNameAssignment_3(), "rule__Image__NameAssignment_3");
					put(grammarAccess.getImageAccess().getCaptionAssignment_5(), "rule__Image__CaptionAssignment_5");
					put(grammarAccess.getImageAccess().getWidthAssignment_6_0_1(), "rule__Image__WidthAssignment_6_0_1");
					put(grammarAccess.getImageAccess().getHeightAssignment_6_1_1(), "rule__Image__HeightAssignment_6_1_1");
					put(grammarAccess.getTextAccess().getContentAssignment(), "rule__Text__ContentAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.lowcoupling.dono.ui.contentassist.antlr.internal.InternalDonoParser typedParser = (com.lowcoupling.dono.ui.contentassist.antlr.internal.InternalDonoParser) parser;
			typedParser.entryRuleDoc();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DonoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DonoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
